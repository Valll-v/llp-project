/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tree.proto */

#ifndef PROTOBUF_C_tree_2eproto__INCLUDED
#define PROTOBUF_C_tree_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Message Message;
typedef struct Response Response;
typedef struct Request Request;
typedef struct Queries Queries;
typedef struct Query Query;
typedef struct Exp Exp;
typedef struct Set Set;
typedef struct SetList SetList;
typedef struct UpdateExp UpdateExp;
typedef struct Reference Reference;
typedef struct ReferenceList ReferenceList;
typedef struct Table Table;
typedef struct Column Column;
typedef struct SelectExp SelectExp;
typedef struct Where Where;
typedef struct DeleteExp DeleteExp;
typedef struct FieldList FieldList;
typedef struct Field Field;
typedef struct CreateExp CreateExp;
typedef struct ValuesList ValuesList;
typedef struct InsertExp InsertExp;
typedef struct DropExp DropExp;
typedef struct LogicExp LogicExp;
typedef struct CompareExp CompareExp;
typedef struct Value Value;


/* --- enums --- */

typedef enum _CompareType {
  COMPARE_TYPE__GEQ = 0,
  COMPARE_TYPE__LEQ = 1,
  COMPARE_TYPE__LESS = 2,
  COMPARE_TYPE__GREATER = 3,
  COMPARE_TYPE__EQ = 4,
  COMPARE_TYPE__NEQ = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COMPARE_TYPE)
} CompareType;
typedef enum _FieldType {
  FIELD_TYPE__INT_FIELD = 0,
  FIELD_TYPE__FLOAT_FIELD = 1,
  FIELD_TYPE__STRING_FIELD = 2,
  FIELD_TYPE__BOOL_FIELD = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FIELD_TYPE)
} FieldType;
typedef enum _LogicType {
  LOGIC_TYPE__OR = 0,
  LOGIC_TYPE__AND = 1,
  LOGIC_TYPE__NOT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOGIC_TYPE)
} LogicType;

/* --- messages --- */

typedef enum {
  MESSAGE__CONTENT__NOT_SET = 0,
  MESSAGE__CONTENT_REQUEST = 1,
  MESSAGE__CONTENT_RESPONSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE__CONTENT__CASE)
} Message__ContentCase;

struct  Message
{
  ProtobufCMessage base;
  Message__ContentCase content_case;
  union {
    Request *request;
    Response *response;
  };
};
#define MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message__descriptor) \
    , MESSAGE__CONTENT__NOT_SET, {0} }


struct  Response
{
  ProtobufCMessage base;
  char *string;
};
#define RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  Request
{
  ProtobufCMessage base;
  Queries *queries;
};
#define REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request__descriptor) \
    , NULL }


struct  Queries
{
  ProtobufCMessage base;
  size_t n_queries;
  Query **queries;
};
#define QUERIES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&queries__descriptor) \
    , 0,NULL }


typedef enum {
  QUERY__CONTENT__NOT_SET = 0,
  QUERY__CONTENT_SELECT_EXP = 1,
  QUERY__CONTENT_UPDATE_EXP = 2,
  QUERY__CONTENT_CREATE_EXP = 3,
  QUERY__CONTENT_DELETE_EXP = 4,
  QUERY__CONTENT_INSERT_EXP = 5,
  QUERY__CONTENT_DROP_EXP = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(QUERY__CONTENT__CASE)
} Query__ContentCase;

struct  Query
{
  ProtobufCMessage base;
  Query__ContentCase content_case;
  union {
    SelectExp *select_exp;
    UpdateExp *update_exp;
    CreateExp *create_exp;
    DeleteExp *delete_exp;
    InsertExp *insert_exp;
    DropExp *drop_exp;
  };
};
#define QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query__descriptor) \
    , QUERY__CONTENT__NOT_SET, {0} }


typedef enum {
  EXP__CONTENT__NOT_SET = 0,
  EXP__CONTENT_VALUE = 1,
  EXP__CONTENT_COMPARE_EXP = 2,
  EXP__CONTENT_LOGIC_EXP = 3,
  EXP__CONTENT_REFERENCE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EXP__CONTENT__CASE)
} Exp__ContentCase;

struct  Exp
{
  ProtobufCMessage base;
  Exp__ContentCase content_case;
  union {
    Value *value;
    CompareExp *compare_exp;
    LogicExp *logic_exp;
    Reference *reference;
  };
};
#define EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&exp__descriptor) \
    , EXP__CONTENT__NOT_SET, {0} }


struct  Set
{
  ProtobufCMessage base;
  Column *column;
  Value *value;
};
#define SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set__descriptor) \
    , NULL, NULL }


struct  SetList
{
  ProtobufCMessage base;
  size_t n_set_list;
  Set **set_list;
};
#define SET_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_list__descriptor) \
    , 0,NULL }


struct  UpdateExp
{
  ProtobufCMessage base;
  SetList *set_list;
  Table *table;
  Where *where;
};
#define UPDATE_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_exp__descriptor) \
    , NULL, NULL, NULL }


struct  Reference
{
  ProtobufCMessage base;
  Table *table;
  Column *column;
};
#define REFERENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reference__descriptor) \
    , NULL, NULL }


struct  ReferenceList
{
  ProtobufCMessage base;
  size_t n_reference;
  Reference **reference;
};
#define REFERENCE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reference_list__descriptor) \
    , 0,NULL }


struct  Table
{
  ProtobufCMessage base;
  char *table;
};
#define TABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&table__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  Column
{
  ProtobufCMessage base;
  char *column;
};
#define COLUMN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&column__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  SelectExp
{
  ProtobufCMessage base;
  Reference *reference;
  Table *table;
  Where *where;
};
#define SELECT_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&select_exp__descriptor) \
    , NULL, NULL, NULL }


struct  Where
{
  ProtobufCMessage base;
  LogicType logic;
};
#define WHERE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&where__descriptor) \
    , LOGIC_TYPE__OR }


struct  DeleteExp
{
  ProtobufCMessage base;
  Table *table;
  Where *where;
};
#define DELETE_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_exp__descriptor) \
    , NULL, NULL }


struct  FieldList
{
  ProtobufCMessage base;
  size_t n_field;
  Field **field;
};
#define FIELD_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&field_list__descriptor) \
    , 0,NULL }


struct  Field
{
  ProtobufCMessage base;
  Column *column;
  FieldType field_type;
};
#define FIELD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&field__descriptor) \
    , NULL, FIELD_TYPE__INT_FIELD }


struct  CreateExp
{
  ProtobufCMessage base;
  Table *table;
  FieldList *field_list;
};
#define CREATE_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_exp__descriptor) \
    , NULL, NULL }


struct  ValuesList
{
  ProtobufCMessage base;
  size_t n_values_list;
  Value **values_list;
};
#define VALUES_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&values_list__descriptor) \
    , 0,NULL }


struct  InsertExp
{
  ProtobufCMessage base;
  Table *table;
  ValuesList *values_list;
};
#define INSERT_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&insert_exp__descriptor) \
    , NULL, NULL }


struct  DropExp
{
  ProtobufCMessage base;
  Table *table;
};
#define DROP_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&drop_exp__descriptor) \
    , NULL }


struct  LogicExp
{
  ProtobufCMessage base;
  LogicType logic;
  Exp *left;
  Exp *right;
};
#define LOGIC_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&logic_exp__descriptor) \
    , LOGIC_TYPE__OR, NULL, NULL }


struct  CompareExp
{
  ProtobufCMessage base;
  CompareType compare;
  Exp *left;
  Exp *right;
};
#define COMPARE_EXP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&compare_exp__descriptor) \
    , COMPARE_TYPE__GEQ, NULL, NULL }


typedef enum {
  VALUE__CONTENT__NOT_SET = 0,
  VALUE__CONTENT_INT = 1,
  VALUE__CONTENT_FLOAT = 2,
  VALUE__CONTENT_STRING = 3,
  VALUE__CONTENT_BOOL = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VALUE__CONTENT__CASE)
} Value__ContentCase;

struct  Value
{
  ProtobufCMessage base;
  Value__ContentCase content_case;
  union {
    int32_t int_;
    float float_;
    char *string;
    protobuf_c_boolean bool_;
  };
};
#define VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&value__descriptor) \
    , VALUE__CONTENT__NOT_SET, {0} }


/* Message methods */
void   message__init
                     (Message         *message);
size_t message__get_packed_size
                     (const Message   *message);
size_t message__pack
                     (const Message   *message,
                      uint8_t             *out);
size_t message__pack_to_buffer
                     (const Message   *message,
                      ProtobufCBuffer     *buffer);
Message *
       message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message__free_unpacked
                     (Message *message,
                      ProtobufCAllocator *allocator);
/* Response methods */
void   response__init
                     (Response         *message);
size_t response__get_packed_size
                     (const Response   *message);
size_t response__pack
                     (const Response   *message,
                      uint8_t             *out);
size_t response__pack_to_buffer
                     (const Response   *message,
                      ProtobufCBuffer     *buffer);
Response *
       response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response__free_unpacked
                     (Response *message,
                      ProtobufCAllocator *allocator);
/* Request methods */
void   request__init
                     (Request         *message);
size_t request__get_packed_size
                     (const Request   *message);
size_t request__pack
                     (const Request   *message,
                      uint8_t             *out);
size_t request__pack_to_buffer
                     (const Request   *message,
                      ProtobufCBuffer     *buffer);
Request *
       request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request__free_unpacked
                     (Request *message,
                      ProtobufCAllocator *allocator);
/* Queries methods */
void   queries__init
                     (Queries         *message);
size_t queries__get_packed_size
                     (const Queries   *message);
size_t queries__pack
                     (const Queries   *message,
                      uint8_t             *out);
size_t queries__pack_to_buffer
                     (const Queries   *message,
                      ProtobufCBuffer     *buffer);
Queries *
       queries__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   queries__free_unpacked
                     (Queries *message,
                      ProtobufCAllocator *allocator);
/* Query methods */
void   query__init
                     (Query         *message);
size_t query__get_packed_size
                     (const Query   *message);
size_t query__pack
                     (const Query   *message,
                      uint8_t             *out);
size_t query__pack_to_buffer
                     (const Query   *message,
                      ProtobufCBuffer     *buffer);
Query *
       query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query__free_unpacked
                     (Query *message,
                      ProtobufCAllocator *allocator);
/* Exp methods */
void   exp__init
                     (Exp         *message);
size_t exp__get_packed_size
                     (const Exp   *message);
size_t exp__pack
                     (const Exp   *message,
                      uint8_t             *out);
size_t exp__pack_to_buffer
                     (const Exp   *message,
                      ProtobufCBuffer     *buffer);
Exp *
       exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   exp__free_unpacked
                     (Exp *message,
                      ProtobufCAllocator *allocator);
/* Set methods */
void   set__init
                     (Set         *message);
size_t set__get_packed_size
                     (const Set   *message);
size_t set__pack
                     (const Set   *message,
                      uint8_t             *out);
size_t set__pack_to_buffer
                     (const Set   *message,
                      ProtobufCBuffer     *buffer);
Set *
       set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set__free_unpacked
                     (Set *message,
                      ProtobufCAllocator *allocator);
/* SetList methods */
void   set_list__init
                     (SetList         *message);
size_t set_list__get_packed_size
                     (const SetList   *message);
size_t set_list__pack
                     (const SetList   *message,
                      uint8_t             *out);
size_t set_list__pack_to_buffer
                     (const SetList   *message,
                      ProtobufCBuffer     *buffer);
SetList *
       set_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_list__free_unpacked
                     (SetList *message,
                      ProtobufCAllocator *allocator);
/* UpdateExp methods */
void   update_exp__init
                     (UpdateExp         *message);
size_t update_exp__get_packed_size
                     (const UpdateExp   *message);
size_t update_exp__pack
                     (const UpdateExp   *message,
                      uint8_t             *out);
size_t update_exp__pack_to_buffer
                     (const UpdateExp   *message,
                      ProtobufCBuffer     *buffer);
UpdateExp *
       update_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_exp__free_unpacked
                     (UpdateExp *message,
                      ProtobufCAllocator *allocator);
/* Reference methods */
void   reference__init
                     (Reference         *message);
size_t reference__get_packed_size
                     (const Reference   *message);
size_t reference__pack
                     (const Reference   *message,
                      uint8_t             *out);
size_t reference__pack_to_buffer
                     (const Reference   *message,
                      ProtobufCBuffer     *buffer);
Reference *
       reference__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reference__free_unpacked
                     (Reference *message,
                      ProtobufCAllocator *allocator);
/* ReferenceList methods */
void   reference_list__init
                     (ReferenceList         *message);
size_t reference_list__get_packed_size
                     (const ReferenceList   *message);
size_t reference_list__pack
                     (const ReferenceList   *message,
                      uint8_t             *out);
size_t reference_list__pack_to_buffer
                     (const ReferenceList   *message,
                      ProtobufCBuffer     *buffer);
ReferenceList *
       reference_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reference_list__free_unpacked
                     (ReferenceList *message,
                      ProtobufCAllocator *allocator);
/* Table methods */
void   table__init
                     (Table         *message);
size_t table__get_packed_size
                     (const Table   *message);
size_t table__pack
                     (const Table   *message,
                      uint8_t             *out);
size_t table__pack_to_buffer
                     (const Table   *message,
                      ProtobufCBuffer     *buffer);
Table *
       table__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   table__free_unpacked
                     (Table *message,
                      ProtobufCAllocator *allocator);
/* Column methods */
void   column__init
                     (Column         *message);
size_t column__get_packed_size
                     (const Column   *message);
size_t column__pack
                     (const Column   *message,
                      uint8_t             *out);
size_t column__pack_to_buffer
                     (const Column   *message,
                      ProtobufCBuffer     *buffer);
Column *
       column__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   column__free_unpacked
                     (Column *message,
                      ProtobufCAllocator *allocator);
/* SelectExp methods */
void   select_exp__init
                     (SelectExp         *message);
size_t select_exp__get_packed_size
                     (const SelectExp   *message);
size_t select_exp__pack
                     (const SelectExp   *message,
                      uint8_t             *out);
size_t select_exp__pack_to_buffer
                     (const SelectExp   *message,
                      ProtobufCBuffer     *buffer);
SelectExp *
       select_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   select_exp__free_unpacked
                     (SelectExp *message,
                      ProtobufCAllocator *allocator);
/* Where methods */
void   where__init
                     (Where         *message);
size_t where__get_packed_size
                     (const Where   *message);
size_t where__pack
                     (const Where   *message,
                      uint8_t             *out);
size_t where__pack_to_buffer
                     (const Where   *message,
                      ProtobufCBuffer     *buffer);
Where *
       where__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   where__free_unpacked
                     (Where *message,
                      ProtobufCAllocator *allocator);
/* DeleteExp methods */
void   delete_exp__init
                     (DeleteExp         *message);
size_t delete_exp__get_packed_size
                     (const DeleteExp   *message);
size_t delete_exp__pack
                     (const DeleteExp   *message,
                      uint8_t             *out);
size_t delete_exp__pack_to_buffer
                     (const DeleteExp   *message,
                      ProtobufCBuffer     *buffer);
DeleteExp *
       delete_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_exp__free_unpacked
                     (DeleteExp *message,
                      ProtobufCAllocator *allocator);
/* FieldList methods */
void   field_list__init
                     (FieldList         *message);
size_t field_list__get_packed_size
                     (const FieldList   *message);
size_t field_list__pack
                     (const FieldList   *message,
                      uint8_t             *out);
size_t field_list__pack_to_buffer
                     (const FieldList   *message,
                      ProtobufCBuffer     *buffer);
FieldList *
       field_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   field_list__free_unpacked
                     (FieldList *message,
                      ProtobufCAllocator *allocator);
/* Field methods */
void   field__init
                     (Field         *message);
size_t field__get_packed_size
                     (const Field   *message);
size_t field__pack
                     (const Field   *message,
                      uint8_t             *out);
size_t field__pack_to_buffer
                     (const Field   *message,
                      ProtobufCBuffer     *buffer);
Field *
       field__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   field__free_unpacked
                     (Field *message,
                      ProtobufCAllocator *allocator);
/* CreateExp methods */
void   create_exp__init
                     (CreateExp         *message);
size_t create_exp__get_packed_size
                     (const CreateExp   *message);
size_t create_exp__pack
                     (const CreateExp   *message,
                      uint8_t             *out);
size_t create_exp__pack_to_buffer
                     (const CreateExp   *message,
                      ProtobufCBuffer     *buffer);
CreateExp *
       create_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_exp__free_unpacked
                     (CreateExp *message,
                      ProtobufCAllocator *allocator);
/* ValuesList methods */
void   values_list__init
                     (ValuesList         *message);
size_t values_list__get_packed_size
                     (const ValuesList   *message);
size_t values_list__pack
                     (const ValuesList   *message,
                      uint8_t             *out);
size_t values_list__pack_to_buffer
                     (const ValuesList   *message,
                      ProtobufCBuffer     *buffer);
ValuesList *
       values_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   values_list__free_unpacked
                     (ValuesList *message,
                      ProtobufCAllocator *allocator);
/* InsertExp methods */
void   insert_exp__init
                     (InsertExp         *message);
size_t insert_exp__get_packed_size
                     (const InsertExp   *message);
size_t insert_exp__pack
                     (const InsertExp   *message,
                      uint8_t             *out);
size_t insert_exp__pack_to_buffer
                     (const InsertExp   *message,
                      ProtobufCBuffer     *buffer);
InsertExp *
       insert_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   insert_exp__free_unpacked
                     (InsertExp *message,
                      ProtobufCAllocator *allocator);
/* DropExp methods */
void   drop_exp__init
                     (DropExp         *message);
size_t drop_exp__get_packed_size
                     (const DropExp   *message);
size_t drop_exp__pack
                     (const DropExp   *message,
                      uint8_t             *out);
size_t drop_exp__pack_to_buffer
                     (const DropExp   *message,
                      ProtobufCBuffer     *buffer);
DropExp *
       drop_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   drop_exp__free_unpacked
                     (DropExp *message,
                      ProtobufCAllocator *allocator);
/* LogicExp methods */
void   logic_exp__init
                     (LogicExp         *message);
size_t logic_exp__get_packed_size
                     (const LogicExp   *message);
size_t logic_exp__pack
                     (const LogicExp   *message,
                      uint8_t             *out);
size_t logic_exp__pack_to_buffer
                     (const LogicExp   *message,
                      ProtobufCBuffer     *buffer);
LogicExp *
       logic_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   logic_exp__free_unpacked
                     (LogicExp *message,
                      ProtobufCAllocator *allocator);
/* CompareExp methods */
void   compare_exp__init
                     (CompareExp         *message);
size_t compare_exp__get_packed_size
                     (const CompareExp   *message);
size_t compare_exp__pack
                     (const CompareExp   *message,
                      uint8_t             *out);
size_t compare_exp__pack_to_buffer
                     (const CompareExp   *message,
                      ProtobufCBuffer     *buffer);
CompareExp *
       compare_exp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   compare_exp__free_unpacked
                     (CompareExp *message,
                      ProtobufCAllocator *allocator);
/* Value methods */
void   value__init
                     (Value         *message);
size_t value__get_packed_size
                     (const Value   *message);
size_t value__pack
                     (const Value   *message,
                      uint8_t             *out);
size_t value__pack_to_buffer
                     (const Value   *message,
                      ProtobufCBuffer     *buffer);
Value *
       value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   value__free_unpacked
                     (Value *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Message_Closure)
                 (const Message *message,
                  void *closure_data);
typedef void (*Response_Closure)
                 (const Response *message,
                  void *closure_data);
typedef void (*Request_Closure)
                 (const Request *message,
                  void *closure_data);
typedef void (*Queries_Closure)
                 (const Queries *message,
                  void *closure_data);
typedef void (*Query_Closure)
                 (const Query *message,
                  void *closure_data);
typedef void (*Exp_Closure)
                 (const Exp *message,
                  void *closure_data);
typedef void (*Set_Closure)
                 (const Set *message,
                  void *closure_data);
typedef void (*SetList_Closure)
                 (const SetList *message,
                  void *closure_data);
typedef void (*UpdateExp_Closure)
                 (const UpdateExp *message,
                  void *closure_data);
typedef void (*Reference_Closure)
                 (const Reference *message,
                  void *closure_data);
typedef void (*ReferenceList_Closure)
                 (const ReferenceList *message,
                  void *closure_data);
typedef void (*Table_Closure)
                 (const Table *message,
                  void *closure_data);
typedef void (*Column_Closure)
                 (const Column *message,
                  void *closure_data);
typedef void (*SelectExp_Closure)
                 (const SelectExp *message,
                  void *closure_data);
typedef void (*Where_Closure)
                 (const Where *message,
                  void *closure_data);
typedef void (*DeleteExp_Closure)
                 (const DeleteExp *message,
                  void *closure_data);
typedef void (*FieldList_Closure)
                 (const FieldList *message,
                  void *closure_data);
typedef void (*Field_Closure)
                 (const Field *message,
                  void *closure_data);
typedef void (*CreateExp_Closure)
                 (const CreateExp *message,
                  void *closure_data);
typedef void (*ValuesList_Closure)
                 (const ValuesList *message,
                  void *closure_data);
typedef void (*InsertExp_Closure)
                 (const InsertExp *message,
                  void *closure_data);
typedef void (*DropExp_Closure)
                 (const DropExp *message,
                  void *closure_data);
typedef void (*LogicExp_Closure)
                 (const LogicExp *message,
                  void *closure_data);
typedef void (*CompareExp_Closure)
                 (const CompareExp *message,
                  void *closure_data);
typedef void (*Value_Closure)
                 (const Value *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    compare_type__descriptor;
extern const ProtobufCEnumDescriptor    field_type__descriptor;
extern const ProtobufCEnumDescriptor    logic_type__descriptor;
extern const ProtobufCMessageDescriptor message__descriptor;
extern const ProtobufCMessageDescriptor response__descriptor;
extern const ProtobufCMessageDescriptor request__descriptor;
extern const ProtobufCMessageDescriptor queries__descriptor;
extern const ProtobufCMessageDescriptor query__descriptor;
extern const ProtobufCMessageDescriptor exp__descriptor;
extern const ProtobufCMessageDescriptor set__descriptor;
extern const ProtobufCMessageDescriptor set_list__descriptor;
extern const ProtobufCMessageDescriptor update_exp__descriptor;
extern const ProtobufCMessageDescriptor reference__descriptor;
extern const ProtobufCMessageDescriptor reference_list__descriptor;
extern const ProtobufCMessageDescriptor table__descriptor;
extern const ProtobufCMessageDescriptor column__descriptor;
extern const ProtobufCMessageDescriptor select_exp__descriptor;
extern const ProtobufCMessageDescriptor where__descriptor;
extern const ProtobufCMessageDescriptor delete_exp__descriptor;
extern const ProtobufCMessageDescriptor field_list__descriptor;
extern const ProtobufCMessageDescriptor field__descriptor;
extern const ProtobufCMessageDescriptor create_exp__descriptor;
extern const ProtobufCMessageDescriptor values_list__descriptor;
extern const ProtobufCMessageDescriptor insert_exp__descriptor;
extern const ProtobufCMessageDescriptor drop_exp__descriptor;
extern const ProtobufCMessageDescriptor logic_exp__descriptor;
extern const ProtobufCMessageDescriptor compare_exp__descriptor;
extern const ProtobufCMessageDescriptor value__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tree_2eproto__INCLUDED */
